@views.route('/upload-character', methods=['GET', 'POST'])
def upload_character():
    """
    Handle character upload.

    Returns:
        GET: Rendered template for character upload.
        POST: Redirects to index if successful, otherwise returns error messages.
    """

    if request.method == 'POST':
        # Ensure file is uploaded
        file = request.files.get('file')
        if not file:
            return 'No file part', 400
        if file.filename == '':
            return 'No selected file', 400
        if not allowed_character_file(file.filename, {json}):
            return 'Invalid file type', 400

        # Saving uploaded file to user dir
        file.save(STORAGE_FOLDER)

        print("character was uploaded")
        return redirect(url_for('views.character_sheet'))
    return render_template('upload_character.html')


@views.route('/download-character', methods=['GET'])
def download_character():
    """Download character data to user's local storage."""
    # Log the client's IP address
    client_ip = request.remote_addr
    print(f"Client IP: {client_ip}")

    file_path = STORAGE_FOLDER
    print(f"File path: {file_path}")
    if os.path.exists(file_path):
        # Send the file to the client with a custom download name
        return send_file(file_path, as_attachment=True, download_name="character.json")
    return 'No file to download', 400

// Buttons event listeners
    // Save character button
    const saveButton = document.getElementById('save-character-button');
    if (saveButton) {
        saveButton.addEventListener('click', () => {
            window.location.href = '/download-character';
        });
    }

    //Upload character button
    const uploadButton = document.getElementById('upload-character-button');
    if (uploadButton) {
        uploadButton.addEventListener('click', () => {
            window.location.href = '/upload-character';
        });
    }












$(document).ready(function() {
    loadCharacterData();

    $(document).on("keydown blur", "input[type='text'], input[type='number'], textarea", debounce(function(e) {
        if (e.type === 'keydown' && e.key !== 'Enter') {
            return;
        }
        updateCharacterData(e.target.id, e.target.value);
    }, 300));

    $(document).on("change", "input[type='checkbox']", function() {
        const checkboxId = this.id;
        const isChecked = this.checked;
        updateCharacterData(checkboxId, isChecked);
    });

    // Buttons event listeners
    const saveButton = document.getElementById('save-character-button');
    if (saveButton) {
        saveButton.addEventListener('click', () => {
            pass;
        });
    }

    const uploadButton = document.getElementById('upload-character-button');
    if (uploadButton) {
        uploadButton.addEventListener('click', () => {
            pass;
        });
    }
});

function updateCharacterData(id, value) {
    $.ajax({
        url: "/save-input",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify({ value: value, type: id }),
        success: function(responseData) {
            updateElementsWithData(responseData["elementsToUpdate"]);
            saveToLocalStorage("character", responseData["packedCharacterData"]);
        },
        error: function(xhr, status, error) {
            console.error("Error saving input data:", error);
        }
    });
}

function loadCharacterData() {
    const characterData = getFromLocalStorage("character");
    $.ajax({
        url: "/load-character-from-storage",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify({ characterData: characterData }),
        success: function(responseData) {
            updateElementsWithData(responseData["elementsToUpdate"]);
            saveToLocalStorage("character", responseData["packedCharacterData"]);
        },
        error: function(xhr, status, error) {
            console.error("Error loading character data:", error);
        }
    });
}

function getFromLocalStorage(key) {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : null;
}

function saveToLocalStorage(key, data) {
    localStorage.setItem(key, JSON.stringify(data));
}

function debounce(func, delay) {
    let timeoutId;
    return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeoutId);
        timeoutId = setTimeout(function() {
            func.apply(context, args);
        }, delay);
    };
}

function updateElementsWithData(data) {
    for (const elementId in data) {
        if (Object.hasOwnProperty.call(data, elementId)) {
            const newValue = data[elementId];
            const element = document.getElementById(elementId);
            console.log(elementId, " = ", newValue);
            if (element) {
                if (element.type === 'text' || element.type === 'number' || element.tagName.toLowerCase() === 'textarea') {
                    element.value = newValue;
                } else if (element.type === 'checkbox') {
                    element.checked = newValue;
                } else {
                    element.innerText = newValue;
                }
                console.log(elementId, " assigned ", newValue);
            }
        }
    }
}















 def update_id_to_object_list(self) -> None:
        """Update data in dictionary of character's attributes bounded to their corresponding input id."""
        self.__input_id_to_object = {
            **self.update_biography_mapping(),
            **self.update_notes_mapping(),
            **self.update_abilities_scores_mapping(),
            **self.update_abilities_modifiers_mapping(),
            **self.update_proficiency_bonus_mapping(),
            **self.update_saving_throws_proficiencies_mapping(),
            **self.update_saving_throws_bonuses_mapping(),
            **self.update_skills_proficiencies_mapping(),
            **self.update_skills_bonuses_mapping(),
            **self.update_battle_stats_mapping(),
            **self.update_health_mapping(),
            **self.update_passive_perception_mapping(),
            **self.update_inventory_mapping(),
            **self.update_features_mapping(),
        }

    # Separate mapping for update_id_to_object_list()
    def update_biography_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            "character-name": (self.character.biography, 'name'),
            "character-class": (self.character.current_game_class, 'name'),
            "character-race": (self.character.race, 'name'),
            "character-level": (self.character.level, 'value'),
            "character-background": (self.character.biography, 'background'),
            "character-alignment": (self.character.biography, 'alignment'),
            "character-experience": (self.character.experience_points, 'value'),
        }

    def update_notes_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            "notes": (self.character.notes, 'notes'),
        }

    def update_abilities_scores_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            'strength-score': (self.character.abilities[AbilityType.STRENGTH], 'score'),
            'dexterity-score': (self.character.abilities[AbilityType.DEXTERITY], 'score'),
            'constitution-score': (self.character.abilities[AbilityType.CONSTITUTION], 'score'),
            'intelligence-score': (self.character.abilities[AbilityType.INTELLIGENCE], 'score'),
            'wisdom-score': (self.character.abilities[AbilityType.WISDOM], 'score'),
            'charisma-score': (self.character.abilities[AbilityType.CHARISMA], 'score'),
        }

    def update_abilities_modifiers_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            'strength-modifier': (self.character.abilities[AbilityType.STRENGTH], 'modifier'),
            'dexterity-modifier': (self.character.abilities[AbilityType.DEXTERITY], 'modifier'),
            'constitution-modifier': (self.character.abilities[AbilityType.CONSTITUTION], 'modifier'),
            'intelligence-modifier': (self.character.abilities[AbilityType.INTELLIGENCE], 'modifier'),
            'wisdom-modifier': (self.character.abilities[AbilityType.WISDOM], 'modifier'),
            'charisma-modifier': (self.character.abilities[AbilityType.CHARISMA], 'modifier'),
        }

    def update_proficiency_bonus_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            'prof-bonus': (self.character.prof_bonus, 'value'),
        }

    def update_saving_throws_proficiencies_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            'strength-saving-throw-prof': (self.character.saving_throws[AbilityType.STRENGTH], 'proficiency'),
            'dexterity-saving-throw-prof': (self.character.saving_throws[AbilityType.DEXTERITY], 'proficiency'),
            'constitution-saving-throw-prof': (self.character.saving_throws[AbilityType.CONSTITUTION], 'proficiency'),
            'intelligence-saving-throw-prof': (self.character.saving_throws[AbilityType.INTELLIGENCE], 'proficiency'),
            'wisdom-saving-throw-prof': (self.character.saving_throws[AbilityType.WISDOM], 'proficiency'),
            'charisma-saving-throw-prof': (self.character.saving_throws[AbilityType.CHARISMA], 'proficiency'),
        }

    def update_saving_throws_bonuses_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            'strength-saving-throw-bonus': (self.character.saving_throws[AbilityType.STRENGTH], 'value'),
            'dexterity-saving-throw-bonus': (self.character.saving_throws[AbilityType.DEXTERITY], 'value'),
            'constitution-saving-throw-bonus': (self.character.saving_throws[AbilityType.CONSTITUTION], 'value'),
            'intelligence-saving-throw-bonus': (self.character.saving_throws[AbilityType.INTELLIGENCE], 'value'),
            'wisdom-saving-throw-bonus': (self.character.saving_throws[AbilityType.WISDOM], 'value'),
            'charisma-saving-throw-bonus': (self.character.saving_throws[AbilityType.CHARISMA], 'value'),
        }

    def update_skills_proficiencies_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            'acrobatics-skill-prof': (self.character.skills[SkillType.ACROBATICS], 'proficiency'),
            'animal-handling-skill-prof': (self.character.skills[SkillType.ANIMAL_HANDLING], 'proficiency'),
            'arcana-skill-prof': (self.character.skills[SkillType.ARCANA], 'proficiency'),
            'athletics-skill-prof': (self.character.skills[SkillType.ATHLETICS], 'proficiency'),
            'deception-skill-prof': (self.character.skills[SkillType.DECEPTION], 'proficiency'),
            'history-skill-prof': (self.character.skills[SkillType.HISTORY], 'proficiency'),
            'insight-skill-prof': (self.character.skills[SkillType.INSIGHT], 'proficiency'),
            'intimidation-skill-prof': (self.character.skills[SkillType.INTIMIDATION], 'proficiency'),
            'investigation-skill-prof': (self.character.skills[SkillType.INVESTIGATION], 'proficiency'),
            'medicine-skill-prof': (self.character.skills[SkillType.MEDICINE], 'proficiency'),
            'nature-skill-prof': (self.character.skills[SkillType.NATURE], 'proficiency'),
            'perception-skill-prof': (self.character.skills[SkillType.PERCEPTION], 'proficiency'),
            'performance-skill-prof': (self.character.skills[SkillType.PERFORMANCE], 'proficiency'),
            'persuasion-skill-prof': (self.character.skills[SkillType.PERSUASION], 'proficiency'),
            'religion-skill-prof': (self.character.skills[SkillType.RELIGION], 'proficiency'),
            'sleight-of-hand-skill-prof': (self.character.skills[SkillType.SLEIGHT_OF_HAND], 'proficiency'),
            'stealth-skill-prof': (self.character.skills[SkillType.STEALTH], 'proficiency'),
            'survival-skill-prof': (self.character.skills[SkillType.SURVIVAL], 'proficiency'),
        }

    def update_skills_bonuses_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            'acrobatics-skill-bonus': (self.character.skills[SkillType.ACROBATICS], 'value'),
            'animal-handling-skill-bonus': (self.character.skills[SkillType.ANIMAL_HANDLING], 'value'),
            'arcana-skill-bonus': (self.character.skills[SkillType.ARCANA], 'value'),
            'athletics-skill-bonus': (self.character.skills[SkillType.ATHLETICS], 'value'),
            'deception-skill-bonus': (self.character.skills[SkillType.DECEPTION], 'value'),
            'history-skill-bonus': (self.character.skills[SkillType.HISTORY], 'value'),
            'insight-skill-bonus': (self.character.skills[SkillType.INSIGHT], 'value'),
            'intimidation-skill-bonus': (self.character.skills[SkillType.INTIMIDATION], 'value'),
            'investigation-skill-bonus': (self.character.skills[SkillType.INVESTIGATION], 'value'),
            'medicine-skill-bonus': (self.character.skills[SkillType.MEDICINE], 'value'),
            'nature-skill-bonus': (self.character.skills[SkillType.NATURE], 'value'),
            'perception-skill-bonus': (self.character.skills[SkillType.PERCEPTION], 'value'),
            'performance-skill-bonus': (self.character.skills[SkillType.PERFORMANCE], 'value'),
            'persuasion-skill-bonus': (self.character.skills[SkillType.PERSUASION], 'value'),
            'religion-skill-bonus': (self.character.skills[SkillType.RELIGION], 'value'),
            'sleight-of-hand-skill-bonus': (self.character.skills[SkillType.SLEIGHT_OF_HAND], 'value'),
            'stealth-skill-bonus': (self.character.skills[SkillType.STEALTH], 'value'),
            'survival-skill-bonus': (self.character.skills[SkillType.SURVIVAL], 'value'),
        }

    def update_battle_stats_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return{
            'armor-class': (self.character.armor_class, 'value'),
            'initiative': (self.character.initiative, 'value'),
            'speed': (self.character.speed, 'value'),
        }

    def update_health_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            'current-hit-points': (self.character.hit_points, 'current_hit_points'),
            'max-hit-points': (self.character.hit_points, 'max_hit_points'),
            'temporary-hit-points': (self.character.temporary_hit_points, 'value'),
            'hit-dice-type': (self.character.hit_dices_pool, 'hit_dice_type'),
            'current-hit-dices-amount': (self.character.hit_dices_pool, 'current_hit_dices_amount'),
            'max-hit-dices-amount': (self.character.hit_dices_pool, 'max_hit_dices_amount'),
            'successful-death-saves': (self.character.death_saves, 'successful_saves'),
            'failed-death-saves': (self.character.death_saves, 'failed_saves'),
        }

    def update_passive_perception_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            'passive-perception': (self.character.passive_perception, 'value'),
        }

    def update_inventory_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            "inventory": (self.character.inventory, 'items'),
        }

    def update_features_mapping(self) -> Dict[str, Tuple[Any, str]]:
        return {
            'features': (self.character.features, 'all_features')
        }